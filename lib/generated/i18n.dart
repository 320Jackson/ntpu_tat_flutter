import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get account => "Account";
  String get accountLock => "AccountLock";
  String get accountNull => "Please enter account";
  String get accountPasswordFail => "AccountPasswordFail";
  String get alertError => "Some thing error";
  String get app_name => "ISchoolHelper";
  String get authCodeFail => "AuthCodeFail";
  String get cancel => "Cancel";
  String get checkLogin => "checkLogin";
  String get connectTimeOut => "ConnectTimeOut";
  String get getCourse => "Getting Course";
  String get getCourseDetail => "getCourseDetail";
  String get getCourseDetailError => "getCourseDetailError";
  String get getCourseError => "getCourseError";
  String get getCourseSemester => "getCourseSemester";
  String get getCourseSemesterError => "getCourseSemesterError";
  String get getISchoolCourseAnnouncement => "getISchoolCourseAnnouncement";
  String get getISchoolCourseAnnouncementError => "getCourseAnnouncementError";
  String get getISchoolCourseFile => "getISchoolCourseFile";
  String get getISchoolCourseFileError => "getISchoolCourseFileError";
  String get getISchoolNewAnnouncement => "Getting ISchoolNewAnnouncement";
  String get getISchoolNewAnnouncementDetail => "getISchoolNewAnnouncementDetail";
  String get getISchoolNewAnnouncementDetailError => "getISchoolNewAnnouncementDetailError";
  String get getISchoolNewAnnouncementError => "getISchoolNewAnnouncementError";
  String get getISchoolNewAnnouncementPage => "getISchoolNewAnnouncementPage";
  String get getISchoolNewAnnouncementPageError => "getISchoolNewAnnouncementPageError";
  String get getScoreRank => "getScoreRank";
  String get getScoreRankError => "getScoreRankError";
  String get loggingISchool => "Logging ISchool...";
  String get loggingNTUT => "Logging NTUT...";
  String get login => "login";
  String get loginCourse => "loginCourse";
  String get loginCourseError => "loginCourseError";
  String get loginISchoolFail => "login ISchool Fail";
  String get loginSave => "Login save";
  String get networkError => "networkError";
  String get ok => "Ok";
  String get password => "Password";
  String get passwordExpiredWarning => "passwordExpiredWarning";
  String get passwordNull => "Please enter password";
  String get pleaseLogin => "Please Login";
  String get resetAccountPassword => "Reset";
  String get restart => "Restart";
  String get unknownError => "unknownError";
  String get updatePassword => "Update";
  String get warning => "Warning";
}

class $en extends S {
  const $en();
}

class $zh extends S {
  const $zh();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get getScoreRankError => "取得成績錯誤";
  @override
  String get loginSave => "帳號密碼已儲存";
  @override
  String get getCourseError => "取得課表錯誤";
  @override
  String get passwordExpiredWarning => "密碼即將過期，請盡快更新密碼";
  @override
  String get loginCourseError => "登入課程系統錯誤";
  @override
  String get passwordNull => "請輸入密碼";
  @override
  String get accountPasswordFail => "帳號密碼錯誤";
  @override
  String get accountNull => "請輸入帳號";
  @override
  String get getCourse => "取得課表...";
  @override
  String get getISchoolCourseAnnouncementError => "取得課程公告錯誤";
  @override
  String get login => "登入";
  @override
  String get checkLogin => "檢查登入...";
  @override
  String get getCourseDetailError => "課程資料讀取錯誤";
  @override
  String get getISchoolCourseAnnouncement => "取得課程公告...";
  @override
  String get resetAccountPassword => "設定";
  @override
  String get alertError => "發生錯誤";
  @override
  String get getCourseSemesterError => "取得學期清單錯誤";
  @override
  String get password => "密碼";
  @override
  String get getISchoolCourseFileError => "取得課程檔案錯誤";
  @override
  String get getISchoolNewAnnouncementDetail => "取得公告資訊...";
  @override
  String get getISchoolNewAnnouncementPage => "取得公告頁數...";
  @override
  String get loginISchoolFail => "登入北科I學園錯誤";
  @override
  String get warning => "警告";
  @override
  String get pleaseLogin => "請登入";
  @override
  String get ok => "確定";
  @override
  String get getISchoolNewAnnouncementError => "取得最新公告錯誤";
  @override
  String get getISchoolNewAnnouncementPageError => "取得公告頁數錯誤";
  @override
  String get networkError => "網路發生錯誤";
  @override
  String get updatePassword => "更新";
  @override
  String get accountLock => "帳號已被鎖住";
  @override
  String get restart => "重試";
  @override
  String get getISchoolNewAnnouncement => "取得最新公告...";
  @override
  String get getCourseDetail => "課程資料讀取中...";
  @override
  String get getCourseSemester => "取得學期清單中...";
  @override
  String get loginCourse => "登入課程系統...";
  @override
  String get getISchoolCourseFile => "取得課程檔案";
  @override
  String get loggingNTUT => "登入校園入口網站中...";
  @override
  String get unknownError => "發生未知錯誤";
  @override
  String get app_name => "北科課程助手";
  @override
  String get authCodeFail => "驗證碼錯誤";
  @override
  String get getISchoolNewAnnouncementDetailError => "取得公告資訊錯誤";
  @override
  String get loggingISchool => "登入北科i學園中...";
  @override
  String get connectTimeOut => "連接逾時";
  @override
  String get getScoreRank => "取得成績中...";
  @override
  String get account => "帳號";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh":
          S.current = const $zh();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
